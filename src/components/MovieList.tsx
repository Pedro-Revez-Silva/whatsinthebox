import ContentLoader from 'react-content-loader'
import { useInfiniteQuery } from 'react-query'
import React from 'react'

import { styled } from 'lib/style'
import { useFilters } from 'lib/filters'

import { Box, Button, Text } from './UI'
import { MovieThumb } from './MovieThumb'

const Wrapper = styled('main', {
  width: '100%',
  height: '$scroll',
  overflowY: 'auto',
  sidebarWidth: 'thin',

  p: '$24',
})

type Props = {
  selectedMovie: string | null
  onSelect: (imdbId: string) => void
}

export const MovieList = ({ onSelect, selectedMovie }: Props) => {
  const { state } = useFilters()
  const { premium, channels, genre, search, sort, year, nationalOnly } = state

  const channelsBlacklist = [...premium, ...channels]

  const fetchMovies = async ({ pageParam = 0 }) => {
    const res = await fetch('/api/movies', {
      method: 'POST',
      headers: {
        'content-type': 'application/json',
      },
      body: JSON.stringify({
        offset: pageParam,
        sort,
        search,
        genre,
        channelsBlacklist:
          channelsBlacklist.length > 0 ? channelsBlacklist : null,
        minYear: year ? year : null,
        maxYear: year ? (Number(year) + 10).toString() : null,
        country: nationalOnly ? 'portugal' : null,
      }),
    })

    if (!res.ok) throw new Error('Could not fetch movies')

    return res.json()
  }

  const { data, isLoading, fetchNextPage, isFetchingNextPage, hasNextPage } =
    useInfiniteQuery<{
      movies: {
        id: number
        imdb_id: string
        poster: string
        year: string
        title: string
        rating_imdb: string | null
        rating_rotten_tomatoes: string | null
      }[]
      count: number
    }>(`movies-${JSON.stringify(state)}`, fetchMovies, {
      getNextPageParam: (lastPage, pages) => {
        const soFar = pages.reduce((acc, p) => (acc += p.movies.length), 0)

        return soFar < lastPage.count ? soFar : undefined
      },
    })

  if (isLoading || !data) {
    return (
      <Box
        css={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          height: '100%',
          width: '100%',
        }}
      >
        <ContentLoader
          speed={2}
          width={650}
          height={150}
          backgroundColor="hsla(220, 10%, 50%, 0.2)"
          foregroundColor="hsla(220, 10%, 50%, 0.025)"
        >
          <path
            d="M530.858 16.37c-6.794 1.923-6.185 1.085-7.055 9.645-.412 4.092-1.826 13.904-3.172 21.799-1.303 7.834-2.454 14.956-2.538 15.764l-.124 1.556 14.851-2.563c13.456-2.341 15.145-2.715 18.031-4.23 6.323-3.227 9.741-7.74 9.529-12.422-.118-3.425-1.122-5.755-3.19-7.441l-1.829-1.512 1.441-.599c2.002-.74 4.626-3.91 5.438-6.476.935-2.797.177-7.921-1.617-10.551-2.838-4.213-7.273-5.789-15.036-5.302-5.878.348-9.858.978-14.729 2.332zm14.416 10.75c3.101 1.522 1.203 4.26-3.499 5.004l-3.05.482.092-1.762c.198-3.104.589-3.643 2.966-4.02 1.189-.187 2.797-.071 3.491.296zm-1.21 17.461c.512.555.558 1.183.292 2.18-.372 1.33-.614 1.474-3.767 1.973-3.669.58-4.036.268-3.374-2.91.269-1.314.459-1.45 3.223-1.728 2.084-.224 3.166-.078 3.626.485zM575.006 12.812c-4.08 1.335-6.226 7.184-7.055 9.646-.829 2.462-1.826 13.903-3.172 21.798-.954 5.74-.418 10.078 1.873 11.835 2.291 1.756 6.005 3.128 10.316 2.923 4.312-.206 11.269-2.102 18.031-4.231 6.762-2.13 9.387-12.664 10.357-21.254.647-5.735 2.254-13.534-.584-17.747-2.839-4.212-7.274-5.788-15.037-5.301-5.878.347-10.649.997-14.729 2.331zm18.177 20.79c-.653 5.511-1.431 6.69-1.697 7.685-.373 1.33-2.651 3.333-7.044 4.029-3.67.58-6.977 1.104-6.775-2.637.203-3.74.311-11.425 2.785-14.2 2.475-2.776 13.978-5.405 12.731 5.123z"
            fill="currentColor"
          />
          <path
            d="M604.444 6.683c-.441.228.245 1.55 2.202 4.207a576.094 576.094 0 016.834 10.043l4.096 6.133-3.589 10.792c-1.975 5.928-3.565 10.947-3.54 11.102.032.207 3.054-.112 6.672-.685l6.615-1.047 1.256-3.112c.685-1.698 1.41-3.137 1.617-3.17.207-.033 1.908 2.347 3.854 5.27 1.894 2.932 3.767 5.39 4.101 5.496.765.144 11.367-2.488 11.672-2.907.138-.127-2.886-4.84-6.737-10.429-3.799-5.597-6.951-10.448-6.992-10.707-.049-.31 1.85-5.378 4.247-11.32 4.137-10.35 5.359-14.675 4.282-15.458-.24-.174-3.202.19-6.553.772l-6.126 1.129-1.391 2.922c-.805 1.61-2.02 3.975-2.778 5.207l-1.335 2.278-1.154-1.937c-.645-1.063-1.971-3.078-2.88-4.47L617.1 4.309l-6.039 1.008c-3.307.524-6.332 1.162-6.617 1.366zM449.373 29.65c-2.353.532-3.846 1.139-4.333 1.746-.443.547-1.217 3.689-1.752 7.005-.534 3.316-1.186 6.227-1.463 6.483-.329.264-1.899.724-3.501.977-3.618.573-3.618.573-2.469-6.23 1.319-7.732 1.634-7.41-6.221-6.168-4.703.745-6.738 1.279-7.034 1.75-.201.402-.807 2.935-1.328 5.666-1.393 7.266-4.431 21.203-5.863 26.886-.684 2.704-1.393 6.26-1.681 7.789-.228 1.572-.635 3.014-.869 3.21-.226.247-.342.849-.252 1.417.147.93.569.916 7.855-.237 5.53-.875 7.772-1.442 8.111-1.972.21-.351 1.03-3.872 1.733-7.797.703-3.926 1.596-7.987 1.906-9.043.609-1.844.799-1.98 3.617-2.585 2.154-.447 2.946-.466 3.028.05.057.362-.44 3.248-1.154 6.434-1.947 8.784-2.327 11.07-2.413 13.202.011 1.746.104 1.997 1.23 2.083.696.049 4.27-.464 7.932-1.096L451.146 78l.676-1.75c1.239-3.215 3.851-17.508 6.298-34.847.494-3.575 1.077-7.587 1.294-8.893.209-1.357.274-2.957.167-3.629-.204-1.292-.307-1.275-10.208.768zM305.938 52.883c-.941.414-1.555 3.901-2.25 13.23-.198 3.103-1.424 12.091-2.659 20.021-1.286 7.938-2.323 14.777-2.404 15.267-.144.764.639.693 6.912-.512 3.911-.725 7.325-1.583 7.594-1.89.269-.308.742-2.343 1.035-4.508.748-5.31 2.45-14.638 2.828-15.599.201-.402.642-.631.977-.525.402.201 1.067 3.062 1.942 8.592l1.317 8.32 5.791-1.234c3.12-.705 6.713-1.433 7.85-1.613 2.171-.344 2.171-.344 2.738-3.453.73-4.089 2.778-18.928 2.924-21.017.016-.903.687-5.036 1.392-9.28.714-4.191 1.333-8.316 1.297-9.21l-.082-1.524-5.244.672c-2.903.406-5.78.967-6.403 1.384-.977.525-1.4 1.864-2.394 7.636-1.292 7.568-1.604 8.942-2.276 9.049-.723.114-2.716-3.438-4.543-8.287-1.046-2.59-2.192-5.48-2.649-6.362l-.83-1.564-5.987 1.001c-3.3.575-6.436 1.178-6.876 1.406zM370.424 42.94c-.711 3.875-1.386 9.65-1.247 10.529.188 1.188.24 1.18 7.888-.03l7.752-1.228-.524 2.043c-.293 1.16-.858 3.95-1.298 6.192-.439 2.242-1.876 8.561-3.177 14.065-1.361 5.46-2.529 10.465-2.585 11.11l-.226 1.254 15.3-2.74.487-1.613c.23-.884.945-4.07 1.572-7.135 1.586-7.72 4.844-22.275 5.374-23.948.416-1.39.571-1.415 7.869-2.835l7.401-1.436.334-1.907c.792-4.364 1.128-7.596.932-8.836l-.213-1.344-22.739 3.6c-17.778 2.814-22.818 3.77-22.9 4.26zM466.253 32.541c-.619 3.118-1.619 7.514-2.154 9.824-.595 2.266-1.124 4.945-1.175 5.96-.052 1.015-.312 2.38-.584 3.006-.631 1.371-5.321 21.609-5.214 22.28.049.31 6.18-.448 16.309-2.051l16.228-2.569.703-2.919c1.19-4.532 2.072-10.34 1.688-10.756-.196-.234-3.794.124-8.032.794-4.703.745-7.837 1.029-8.092.752-.256-.278-.102-1.309.268-2.32l.72-1.81 6.901-1.251c5.203-.93 7.083-1.44 7.613-2.106.93-1.154 2.067-8.697 1.481-9.717-.364-.63-1.474-.614-6.952.253-5.892.932-6.477.92-6.608.092-.376-2.377.454-2.826 8.344-4.181l7.469-1.341.586-4.331c.312-2.38.472-5.054.393-5.89l-.194-1.558-14.288 2.103-14.332 2.162-1.078 5.574zM283.398 60.424c-.32 1.322-.611 3.17-.67 4.132l-.1 1.711 6.876-1.406c3.748-.752 7.075-1.49 7.42-1.651.492-.237 1.429-5.365 1.208-6.76-.057-.362-2.364-.209-7.118.544l-6.977 1.104-.639 2.326zM288.447 68.895l-6.427 1.23-2.744 15.797c-1.482 8.71-2.48 16.126-2.26 16.515.357.579 1.717.47 8.005-.632 8.96-1.63 7.951-.304 9.606-12.274.665-4.502 1.522-10.465 1.924-13.283.401-2.819.642-5.982.59-6.98-.224-2.084.628-2.06-8.694-.373zM113.741 82.043c-.967 1.584-2.733 9.174-3.938 16.622-3.37 20.876-4.214 26.255-4.124 26.823.065.414 2.105.25 7.412-.696l7.314-1.317.885-4.113c.44-2.242 1.068-4.301 1.397-4.565.329-.264 1.898-.725 3.5-.978 3.36-.532 3.044-.853 5.231 5.264.765 2.157 1.72 4.178 2.139 4.482.83.558 13.547-.766 14.335-1.474.278-.256-2.802-8.668-8.011-21.829l-8.479-21.438-8.603 1.203c-6.735.96-8.734 1.383-9.058 2.016zm11.821 16.777l.893 3.302-1.86.294c-1.034.164-1.894.088-1.935-.17-.155-.982.299-8.153.571-8.778.342-.85 1.255 1.231 2.331 5.352zM96.823 84.933c-2.715.589-3.854 1.087-4.376 1.805-.332.583-1.106 3.725-1.597 6.98-.543 3.265-1.195 6.176-1.524 6.44-.329.264-1.898.725-3.5.978-3.566.565-3.55.668-2.464-5.861.434-2.612.8-5.318.79-6.058l-.05-1.317-6.795.917c-5.03.69-6.917 1.148-7.205 1.67-.253.41-.905 3.322-1.464 6.483-1.404 7.533-3.834 18.618-5.602 25.52-.739 3.031-1.453 6.216-1.52 7.128-.077.859-.392 2.551-.745 3.667-.396 1.175-.638 2.326-.589 2.636.057.361 2.614.116 7.92-.83l7.883-1.407.576-2.051c.354-1.115 1.133-4.894 1.73-8.485 1.534-8.719 1.664-8.898 5.127-9.446 3.359-.532 3.375-.429 2.243 4.465-.953 4.018-2.042 9.859-2.653 14.035-.347 2.492-.273 2.957.464 3.264.455.193 4.002-.157 7.878-.77 7.028-1.113 7.132-1.129 7.754-2.552 1.016-2.28 3.474-14.535 5.023-25.164.74-5.361 1.63-11.118 1.902-12.75.776-4.467 1.234-8.936 1.038-10.177-.188-1.188-.292-1.172-10.244.88zM4.79 111.949c2.545 6.378 6.33 15.897 8.437 21.179 3.254 8.173 3.957 9.598 4.868 9.666 1.46.193 7.86-.873 10.233-1.62 1.76-.596 1.89-.776 2.223-3.689.212-1.676.885-6.126 1.5-9.932l1.124-6.959 3.403 6.772c1.854 3.68 4.241 8.388 5.3 10.392l2.01 3.655 11.935-1.571.508-9.51c.642-12.339 1.363-20.505 2.668-30.671.553-4.538 1.006-8.37.973-8.577-.05-.31-11.019 2.009-12.349 2.643-.94.414-1.231 2.26-1.639 11.066-.21 3.689-.479 7.016-.671 7.47-.44 1.235-3.143-2.787-6.563-9.662l-2.825-5.804-12.51 2.298-.833 4.105c-.44 2.242-.88 5.49-.936 7.141-.11 2.984-.852 5.326-1.502 4.899-.128-.138-1.46-3.53-2.83-7.498-1.429-4.012-2.845-7.602-3.177-8.026-.544-.762-5.457-.673-11.297.252l-2.687.425 4.637 11.556zM145.007 82.445c-1.278 7.99-1.833 7.495 7.263 6.055l7.752-1.227-.524 2.043c-.294 1.16-.761 3.564-1.007 5.351-.247 1.788-.712 3.874-1.011 4.663-.405 1.124-2.498 9.984-5.176 21.851-.25 1.099 14.618-1.36 15.289-2.473.296-.471 1.098-3.776 1.806-7.332 1.214-6.39 4.801-22.215 5.546-24.875.415-1.39.467-1.399 7.729-2.707 6.651-1.159 7.358-1.377 7.676-2.38.66-1.853 1.59-10.37 1.198-10.838-.247-.226-9.634 1.048-23.071 3.175l-22.688 3.59-.782 5.104zM232.379 65.808c-2.339.953-5.284 2.426-6.625 3.327-4.645 3.119-7.635 8.995-7.353 14.46.159 2.677.235 2.824 2.782 4.858 1.453 1.147 3.834 2.465 5.284 2.924 2.402.786 2.71 1.055 2.947 2.554.54 3.41.012 3.759-8.466 5.419l-7.608 1.469-1.002 5.721c-.559 3.161-1.221 6.338-1.485 7.016-.255.729-.296 1.477-.065 1.599.24.174 4.364-.214 9.23-.931 16.75-2.28 21.177-5.1 24.021-15.245 2.614-9.26 2.058-11.768-3.406-15.83-3.488-2.626-4.03-3.706-2.681-5.562.739-1.017 1.542-1.303 5.676-1.958l4.858-.769 1.252-5.813c.714-3.186 1.254-6.132 1.189-6.545-.188-1.19-13.067 1.114-18.548 3.306zM201.163 71.784c-.047 1.788-.01 4.304.067 5.626l.142 2.351 4.233-1.115c2.309-.588 4.35-1.207 4.551-1.388.287-.267.27-7.236-.039-9.19-.081-.506-1.539-.572-4.492-.105l-4.333.686-.129 3.135z"
            fill="currentColor"
          />
        </ContentLoader>
      </Box>
    )
  }

  if (data.pages[0].count === 0) {
    return (
      <Box
        css={{
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'space-between',
          height: '100%',
          opacity: 1,
        }}
      >
        <Box css={{ mt: '15vh', textAlign: 'center' }}>
          <Text variant="big" css={{ fontWeight: '$medium' }}>
            Nothing&apos;s here
          </Text>
          <Text variant="small" css={{ mt: '$4', color: '$secondary' }}>
            Try updating your filters
          </Text>
        </Box>
        <img src="/travolta.gif" alt="no results found" />
      </Box>
    )
  }

  return (
    <Wrapper>
      <Box
        css={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',
          gap: '$16',
        }}
      >
        {data.pages.map((page, i) => (
          <React.Fragment key={i}>
            {page.movies.map((movie) => {
              return (
                <MovieThumb
                  key={movie.id}
                  imdbId={movie.imdb_id}
                  image={movie.poster}
                  title={movie.title}
                  year={movie.year}
                  imdbRating={movie.rating_imdb}
                  rottenRating={movie.rating_rotten_tomatoes}
                  onSelect={() => onSelect(movie.imdb_id)}
                  selectedMovie={selectedMovie}
                />
              )
            })}
          </React.Fragment>
        ))}
      </Box>
      {!isLoading && hasNextPage && (
        <Box
          css={{
            pointerEvents: isFetchingNextPage ? 'none' : undefined,
            opacity: isFetchingNextPage ? '0.5' : undefined,
            mt: '$40',
            width: '100%',
            display: 'flex',
            justifyContent: 'center',
          }}
        >
          <Button
            disabled={isFetchingNextPage}
            size="lg"
            onClick={() => fetchNextPage()}
          >
            {isFetchingNextPage ? 'Loading...' : 'Load more'}
          </Button>
        </Box>
      )}
    </Wrapper>
  )
}
